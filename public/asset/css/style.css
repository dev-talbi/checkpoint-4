.card-home{

    margin-top: 20px;
}


.link-injustice:link{
    text-decoration: none;
    color: black;

}

.link-injustice:hover{
    text-decoration: none;
    color: black;

}

.link-injustice:visited{
    text-decoration: none;
    color: black;

}

.link-injustice:active{
    text-decoration: none;
    color: black;

}

.hide{
    display: none;
}

.container-button-subscribe{
    display: flex;
    justify-content: flex-end;
}

.btn-danger{
    margin-left:10px ;
}

.container-edit{
    display:flex;
    justify-content: center;
}

.avatar{
    width: 300px;
    border-radius: 200px;
    border: solid #61ADE0
}

.container-avatar{
    display: flex;
    justify-content: center;
}

/* Burger-menue */
/*
=====
DEPENDENCES
=====
*/

/* The component will reset button browser styles */

.r-button {
  --uirButtonBackgroundColor: var(--rButtonBackgroundColor, transparent);
  --uirButtonPadding: var(
    --rButtonPadding,
    var(--rButtonPaddingTop, 0) var(--rButtonPaddingRight, 0)
      var(--rButtonPaddingBottom, 0) var(--rButtonPaddingLeft, 0)
  );
  --uirButtonBorderWidth: var(--rButtonBorderWidth, 0);
  --uirButtonBorderStyle: var(--rButtonBorderStyle, solid);
  --uirButtonBorderColor: var(--rButtonBorderColor, currentColor);
  --uirButtonFontFamily: var(--rButtonFontFamily, inherit);
  --uirButtonFontSize: var(--rButtonFontSize, inherit);
  --uirButtonColor: var(--rButtonColor);

  background-color: var(--uirButtonBackgroundColor);
  padding: var(--uirButtonPadding);

  border-width: var(--uirButtonBorderWidth);
  border-style: var(--uirButtonBorderStyle);
  border-color: var(--uirButtonBorderColor);

  cursor: pointer;

  font-family: var(--uirButtonFontFamily);
  font-size: var(--uirButtonFontSize);
}

.r-button::-moz-focus-inner,
.r-button[type="button"]::-moz-focus-inner,
.r-button[type="reset"]::-moz-focus-inner,
.r-button[type="submit"]::-moz-focus-inner {
  /* Remove the inner border and padding in Firefox. */

  border-style: none;
  padding: 0;
}

/* The component will reset browser's styles of link */

.r-link {
  --uirLinkDisplay: var(--rLinkDisplay, inline-flex);
  --uirLinkTextColor: var(--rLinkTextColor);
  --uirLinkTextDecoration: var(--rLinkTextDecoration, none);

  display: var(--uirLinkDisplay) !important;
  color: var(--uirLinkTextColor) !important;
  text-decoration: var(--uirLinkTextDecoration) !important;
}

/* The component will reset browser's styles of list */

.r-list {
  --uirListPaddingLeft: var(--rListPaddingLeft, 0);
  --uirListMarginTop: var(--rListMarginTop, 0);
  --uirListMarginBottom: var(--rListMarginBottom, 0);
  --uirListListStyle: var(--rListListStyle, none);

  padding-left: var(--uirListPaddingLeft) !important;
  margin-top: var(--uirListMarginTop) !important;
  margin-bottom: var(--uirListMarginBottom) !important;
  list-style: var(--uirListListStyle) !important;
}

/* Basic styles of the hamburger component */

.m-hamburger {
  --uiHamburgerThickness: var(--hamburgerThickness, 4px);

  display: var(--hamburgerDisplay, inline-flex);
  width: var(--hamburgerWidth, 28px);
  height: var(--hamburgerHeight, 20px);

  position: relative;
}

.m-hamburger::before,
.m-hamburger::after,
.m-hamburger__label {
  width: 100%;
  height: var(--uiHamburgerThickness);
  border-radius: var(--hamburgerBorderRadius, 5px);
  background-color: var(--hamburgerBackgroundColor, currentColor);

  position: absolute;
  left: 0;
}

.m-hamburger::before,
.m-hamburger::after {
  content: "";
}

.m-hamburger::before {
  top: 0;
}

.m-hamburger::after {
  bottom: 0;
}

.m-hamburger__label {
  /* The calculation of middle hamburger button line position */

  top: calc(50% - calc(var(--uiHamburgerThickness) / 2));
}

/* helper to hide elements that are available only for screen readers. */

.screen-reader {
  width: var(--screenReaderWidth, 1px) !important;
  height: var(--screenReaderHeight, 1px) !important;
  padding: var(--screenReaderPadding, 0) !important;
  border: var(--screenReaderBorder, none) !important;

  position: var(--screenReaderPosition, absolute) !important;
  clip: var(--screenReaderClip, rect(1px, 1px, 1px, 1px)) !important;
  overflow: var(--screenReaderOverflow, hidden) !important;
}

/*
=====
MENU STYLES
=====
*/

.menu {
  --uiMenuCircleSize: var(--menuCircleSize, 6.25rem);
  --uiMenuCircleOffset: var(--menuCircleOffset, 1rem);
  --uiMenuCircleHeight: calc(var(--uiMenuCircleSize) / 2);
  --uiMenuCircleBackgroundColor: var(--menuCircleBackgroundColor, currentColor);

  --uiMenuHamburgerWidth: var(--menuHamburgerWidth, 1.75rem);
  --uiMenuHamburgerHeight: var(--menuHamburgerHeight, 1.25rem);

  --rButtonPaddingTop: calc(
    var(--uiMenuCircleHeight) - var(--uiMenuHamburgerHeight) -
      var(--uiMenuCircleOffset)
  );

  --hamburgerWidth: var(--uiMenuHamburgerWidth);
  --hamburgerHeight: var(--uiMenuHamburgerHeight);
  --hamburgerBackgroundColor: var(--menuHamburgerBackgroundColor, #fff);

  width: 100%;

  display: flex;
  flex-direction: column;
  align-items: center;

  position: fixed;
  bottom: 0;
  left: 0;
  z-index: var(--menuZindex, 9998);
}

.menu__nav {
  box-sizing: border-box;
  width: 100%;
  height: 0;

  transition: opacity 0.2s ease-out;
  opacity: 0;

  display: flex;
  align-items: flex-end;
  z-index: 2;
}

.menu__list {
  width: 100%;
  max-height: 100%;

  overflow-y: auto;
  -webkit-overflow-scrolling: touch;
}

.menu__toggle {
  box-sizing: border-box;
  width: var(--uiMenuCircleSize);
  height: var(--uiMenuCircleHeight);
  flex: none;

  position: relative;
  z-index: 0;
}

.menu__toggle::before {
  /*
  1. The font-size property is used to simplify calculations of the element's sizes and position
  2. The negative value for the bottom property need for hiding half of circle. 
  */

  content: "";
  width: 1em;
  height: 1em;
  font-size: var(--uiMenuCircleSize); /* 1 */

  background-color: var(--uiMenuCircleBackgroundColor);
  border-radius: 50%;

  position: absolute;
  bottom: -0.5em; /* 2 */
  left: calc(50% - 0.5em);
  z-index: -1;

  will-change: width, height;
  transition: transform 0.25s cubic-bezier(0.04, -0.1, 0.29, 0.98),
    width 0.25s cubic-bezier(0.04, -0.1, 0.29, 0.98),
    height 0.25s cubic-bezier(0.04, -0.1, 0.29, 0.98);
}

/* styles of hamburger's animation */

.m-hamburger::before,
.m-hamburger::after,
.m-hamburger__label {
  transition-timing-function: ease;
  transition-duration: 0.15s;
}

.m-hamburger::before,
.m-hamburger::after {
  transition-property: transform;
}

.m-hamburger__label {
  transition-property: transform, opacity;
}

/*
=====
MENU STATES
=====
*/

.menu__toggle:focus {
  outline: var(--menuHaburgerOutlineOWidth, 2px) solid
    var(--menuHaburgerOutlineColor);
  outline-offset: var(--menuHaburgerOutlineOffset, 5px);
}

.menu_activated {
  height: 100%;
}

.menu_activated .menu__nav {
  flex-grow: 1;
  opacity: 1;

  will-change: opacity;
  transition-duration: 0.2s;
  transition-delay: 0.3s;
}

.menu_activated .menu__toggle::before {
  width: 100vmax;
  height: 100vmax;
  transform: translate3d(-50vh, -50vh, 0) scale(5);
  transition-duration: 1s;
}

.menu:not(.menu_activated) .menu__list {
  display: none;
}

.menu_activated .m-hamburger::before {
  top: 50%;
  transform: translate3d(0, -50%, 0) rotate(45deg);
}

.menu_activated .m-hamburger::after {
  transform: translate3d(0, -50%, 0) rotate(135deg);
  top: 50%;
}

.menu_activated .m-hamburger__label {
  transform: rotate(-45deg) translate3d(-0.285em, -0.3em, 0);
  opacity: 0;
}

/*
=====
SETTINGS
=====
*/

:root {
  --colorWhite: #fff;
  --colorMain: #3194AD;
  --menuCircleBackgroundColor: var(--colorMain);
  --menuHamburgerBackgroundColor: var(--colorWhite);
  --menuHaburgerOutlineColor: var(--colorMain);
}

.menu_activated {
  --menuHaburgerOutlineColor: var(--colorWhite);
}

/*
=====
DEMO
=====
*/


.page {
  max-width: 380px;
  padding: 1rem;
  margin: auto;
  text-align: center;
}

.page__name {
  display: block;
  font-size: 2rem;
  font-weight: 700;
}

.page__hint {
  display: block;
  line-height: 1.45;
  margin-top: 1rem;
}

.menu__group {
  --rLinkTextColor: var(--colorWhite);

  padding: 0.5rem 2rem;
  font-size: 2rem;
  font-weight: 700;
  text-transform: uppercase;
}

/*
  Content
*/
div#content {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  padding: 60px;
  overflow: scroll;
  background: #fcfeff;
  border-radius: 0;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  -moz-box-shadow: -3px 0 6px #4a5562;
  -webkit-box-shadow: -3px 0 6px #4a5562;
  box-shadow: -3px 0 6px #4a5562;
  -moz-transition: all 300ms;
  -webkit-transition: all 300ms;
  transition: all 300ms;
}
div#content div.menu-trigger {
  position: fixed;
  top: 10px;
  left: 10px;
  width: 36px;
  height: 36px;
  background: #dfe5eb;
  cursor: pointer;
  border-radius: 5px;
  -moz-transition: all 300ms;
  -webkit-transition: all 300ms;
  transition: all 300ms;
}
div#content div.menu-trigger:before {
  content: "\e801";
  display: inline-block;
  width: 36px;
  height: 36px;
  color: black;
  font-family: "ico";
  font-style: normal;
  font-size: 1.2em;
  font-weight: normal;
  font-variant: normal;
  text-align: center;
  text-transform: none;
  line-height: 36px;
}
div#content div.menu-trigger:hover {
  background: #556270;
}
div#content div.menu-trigger:hover:before {
  color: #fcfeff;
}

body.menu-active div#content {
  left: 284px;
  border-radius: 7px 0 0 7px;
}

body.menu-active div#content .menu-trigger {
  left: 294px;
}

.container-comment{
  margin-top: 40px;
}

   @media screen and (max-width: 1000px) {

        .navbar{
            display: none;
        }

    }

        @media screen and (min-width: 1000px) {
        .menu{
            display: none;
        }
    }